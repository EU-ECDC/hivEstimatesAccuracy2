% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/CreateTask.R
\name{CreateTask}
\alias{CreateTask}
\title{CreateTask}
\usage{
CreateTask(expr, args = NULL, timeout = 1000L)
}
\arguments{
\item{expr}{Expression to be executed. Required.}

\item{args}{List object with arguments to be passed to \code{expr}. Optional.
Default = \code{NULL}}

\item{timeout}{Number of milliseconds between consecutive checks of the task. Optional.
Default = 1000L}
}
\value{
Closure
}
\description{
Create a long-running task, on Linux executed in a forked process, on Windows in the same
session.\cr
}
\details{
The return value is a promise-like object with three methods:\cr
- completed(): FALSE initially, then TRUE if the task succeeds, fails, or is cancelled. Reactive,
  so when the state changes any reactive readers will invalidate.\cr
- result(): Use this to get the return value. While execution is in progress, performs a
  req(FALSE). If task succeeded, returns the return value. If failed, throws error. Reactive, so
  when the state changes any reactive readers will invalidate.\cr
- cancel(): Call this to prematurely terminate the task.
}
\examples{
\dontrun{
task <- CreateTask({
  Sys.sleep(5)
  cars[sample(nrow(cars), 10),]
})
shiny::isolate(task$result())
}

}
