// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// Seq
Rcpp::IntegerVector Seq(const int& start, const int& end);
RcppExport SEXP _hivPlatform_Seq(SEXP startSEXP, SEXP endSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type start(startSEXP);
    Rcpp::traits::input_parameter< const int& >::type end(endSEXP);
    rcpp_result_gen = Rcpp::wrap(Seq(start, end));
    return rcpp_result_gen;
END_RCPP
}
// integrate_test
Rcpp::List integrate_test();
RcppExport SEXP _hivPlatform_integrate_test() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(integrate_test());
    return rcpp_result_gen;
END_RCPP
}
// PostWCpp
double PostWCpp(const double& w, const Rcpp::DataFrame& y, const Rcpp::DataFrame& z, const Eigen::MatrixXd& xAIDS, const Rcpp::NumericVector& maxDTime, const Eigen::MatrixXd& betaAIDS, const Rcpp::NumericVector& kappa, const Rcpp::NumericVector& bFE, const Rcpp::NumericVector& sigma2, const Rcpp::NumericVector& varCovRE, const Rcpp::NumericVector& fxCD4Data, const Rcpp::NumericVector& fxVRData, const Rcpp::NumericVector& fzData, const Rcpp::NumericVector& consc, const Rcpp::NumericVector& consr);
RcppExport SEXP _hivPlatform_PostWCpp(SEXP wSEXP, SEXP ySEXP, SEXP zSEXP, SEXP xAIDSSEXP, SEXP maxDTimeSEXP, SEXP betaAIDSSEXP, SEXP kappaSEXP, SEXP bFESEXP, SEXP sigma2SEXP, SEXP varCovRESEXP, SEXP fxCD4DataSEXP, SEXP fxVRDataSEXP, SEXP fzDataSEXP, SEXP conscSEXP, SEXP consrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const Rcpp::DataFrame& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const Rcpp::DataFrame& >::type z(zSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type xAIDS(xAIDSSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type maxDTime(maxDTimeSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type betaAIDS(betaAIDSSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type bFE(bFESEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type varCovRE(varCovRESEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type fxCD4Data(fxCD4DataSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type fxVRData(fxVRDataSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type fzData(fzDataSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type consc(conscSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type consr(consrSEXP);
    rcpp_result_gen = Rcpp::wrap(PostWCpp(w, y, z, xAIDS, maxDTime, betaAIDS, kappa, bFE, sigma2, varCovRE, fxCD4Data, fxVRData, fzData, consc, consr));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_hivPlatform_Seq", (DL_FUNC) &_hivPlatform_Seq, 2},
    {"_hivPlatform_integrate_test", (DL_FUNC) &_hivPlatform_integrate_test, 0},
    {"_hivPlatform_PostWCpp", (DL_FUNC) &_hivPlatform_PostWCpp, 15},
    {NULL, NULL, 0}
};

RcppExport void R_init_hivPlatform(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
